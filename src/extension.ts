// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as fs from 'fs/promises';
import os from 'os';
import path from 'path';
import * as vscode from 'vscode';

// Supported file types for scratch files
const supportedFileTypes = [
  {
    label: 'Markdown',
    description: 'Markdown files',
    fileExtensions: ['.md'],
  },
  {
    label: 'JSON',
    description: 'JSON files',
    fileExtensions: ['.json'],
  },
  {
    label: 'JavaScript',
    description: 'JavaScript files',
    fileExtensions: ['.js', '.jsx'],
  },
  {
    label: 'TypeScript',
    description: 'TypeScript files',
    fileExtensions: ['.ts', '.tsx'],
  },
  {
    label: 'Python',
    description: 'Python files',
    fileExtensions: ['.py'],
  },
];

// Persistent scratch file counter
let scratchCounter = 0;

// Generate a unique scratch file URI
async function getNextScratchFilename(
  context: vscode.ExtensionContext,
  extension: string,
): Promise<vscode.Uri> {
  scratchCounter = context.globalState.get<number>('scratchCounter') || 0;
  scratchCounter++;
  await context.globalState.update('scratchCounter', scratchCounter);
  const scratchDir = path.join(os.homedir(), 'scratches');
  await fs.mkdir(scratchDir, { recursive: true });
  const filename = `scratch_${scratchCounter}${extension}`;
  const tempFilePath = path.join(scratchDir, filename);
  return vscode.Uri.file(tempFilePath);
}

// Get template content based on file extension
function getTemplateForExtension(extension: string): string {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();

  switch (extension) {
    case '.md':
      return `# ðŸ““ Scratch Note

**Created:** ${currentDate} at ${currentTime}
**Tags:**

---

## Notes

-

## TODO

- [ ]

---
*Generated by Scratchy extension*`;

    case '.json':
      return `{
  "name": "scratch_file",
  "created": "${currentDate}",
  "description": "Scratch file for quick testing",
  "data": {

  }
}`;

    case '.js':
      return `// JavaScript Scratch File
// Created: ${currentDate} at ${currentTime}

console.log('Hello from scratch!');

// Your code here
function main() {
  // TODO: Add your logic here
}

main();`;

    case '.jsx':
      return `// React JSX Scratch File
// Created: ${currentDate} at ${currentTime}

import React from 'react';

function ScratchComponent() {
  return (
    <div>
      <h1>Scratch Component</h1>
      <p>Created on ${currentDate}</p>
    </div>
  );
}

export default ScratchComponent;`;

    case '.ts':
      return `// TypeScript Scratch File
// Created: ${currentDate} at ${currentTime}

interface ScratchData {
  id: number;
  name: string;
  created: string;
}

function main(): void {
  const data: ScratchData = {
    id: 1,
    name: 'scratch',
    created: '${currentDate}',
  };

  console.log('Hello from TypeScript scratch!', data);
}

main();`;

    case '.tsx':
      return `// React TypeScript Scratch File
// Created: ${currentDate} at ${currentTime}

import React from 'react';

interface ScratchComponentProps {
  title?: string;
}

const ScratchComponent: React.FC<ScratchComponentProps> = ({
  title = 'Scratch Component'
}) => {
  return (
    <div>
      <h1>{title}</h1>
      <p>Created on ${currentDate}</p>
    </div>
  );
};

export default ScratchComponent;`;

    case '.py':
      return `# Python Scratch File
# Created: ${currentDate} at ${currentTime}

def main():
    """Main function for scratch file."""
    print("Hello from Python scratch!")

    # TODO: Add your code here
    data = {
        "name": "scratch",
        "created": "${currentDate}",
        "type": "python"
    }

    print(f"Data: {data}")

if __name__ == "__main__":
    main()`;

    default:
      return `// Scratch File
// Created: ${currentDate} at ${currentTime}
// Type: ${extension}

// Your code here`;
  }
}

// This method is called when your extension is activated
export function activate(context: vscode.ExtensionContext) {
  // Register the command to show the scratch file modal
  const disposable = vscode.commands.registerCommand(
    'scratchy.show',
    async () => {
      // Show the list of supported file types
      const fileTypes = supportedFileTypes.map((f) => f.label);
      const selectedType = await vscode.window.showQuickPick(fileTypes, {
        placeHolder: 'Select a file type',
      });

      if (!selectedType) {
        return;
      }

      // Get the file extension for the selected type
      const fileExtension = supportedFileTypes.find(
        (f) => f.label === selectedType,
      )?.fileExtensions[0];
      if (!fileExtension) {
        return;
      }

      // Create a unique scratch file using a persistent counter
      const tempFile = await getNextScratchFilename(context, fileExtension);

      // Get template content based on file extension
      const template = getTemplateForExtension(fileExtension);
      await vscode.workspace.fs.writeFile(
        tempFile,
        Buffer.from(template, 'utf8'),
      );

      const doc = await vscode.workspace.openTextDocument(tempFile);

      // Set language based on file extension
      const ext = path.extname(tempFile.fsPath);
      const langIdMap: Record<string, string> = {
        '.md': 'markdown',
        '.json': 'json',
        '.js': 'javascript',
        '.jsx': 'javascript',
        '.ts': 'typescript',
        '.tsx': 'typescriptreact',
        '.py': 'python',
      };
      const langId = langIdMap[ext];
      if (langId) {
        await vscode.languages.setTextDocumentLanguage(doc, langId);
      }

      await vscode.window.showTextDocument(doc);

      // Auto-open markdown preview for markdown files
      if (fileExtension === '.md') {
        await vscode.commands.executeCommand(
          'markdown.showPreviewToSide',
          doc.uri,
        );
      }
    },
  );

  // Register markdown preview command
  const previewDisposable = vscode.commands.registerCommand(
    'scratchy.showMarkdownPreview',
    async () => {
      const activeEditor = vscode.window.activeTextEditor;
      if (!activeEditor) {
        vscode.window.showInformationMessage('No active editor to preview.');
        return;
      }

      const doc = activeEditor.document;

      if (doc.languageId !== 'markdown') {
        vscode.window.showInformationMessage(
          'Active file is not a Markdown file.',
        );
        return;
      }

      // Open preview
      await vscode.commands.executeCommand(
        'markdown.showPreviewToSide',
        doc.uri,
      );
    },
  );

  context.subscriptions.push(disposable, previewDisposable);
}

// This method is called when your extension is deactivated
export function deactivate() {}
